// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------


@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin size($width, $height) {
      width: $width;
      height: $height;
}

@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;                                               
  
  @each $offset in $offsets {                                       
    $index: index($args, $offset);                                   
    @if $index {                                                     
      @if $index == length($args) {                                 
        #{$offset}: 0;                                              
      }
      @else {                                                        
        $next: nth($args, $index + 1);                              
        @if is-valid-length($next) {                                 
          #{$offset}: $next;                                         
        }
        @else if index($offsets, $next) {                           
          #{$offset}: 0;                                            
        }
        @else {                                                      
          @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
        }
      }
    }
  }
}


@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value)) 
       or (index(auto initial inherit 0, $value) != false);
}
 
@mixin absolute($args: ()) {
  @include position(absolute, $args);
}
 
@mixin fixed($args: ()) {
  @include position(fixed, $args);
}
 
@mixin relative($args: ()) {
  @include position(relative, $args);
}

@mixin prefix($property, $value, $vendors: webkit moz ms o) {
      @if $vendors {
        @each $vendor in $vendors {
          #{"-" + $vendor + "-" + $property}: #{$value};
        }
      }
      #{$property}: #{$value};
}

/* Animations Mixins */

@mixin transition($args) {
  -webkit-transition: $args;
  transition: $args;
}

@mixin rotate($args){
  -webkit-transform: rotate($args);
  -ms-transform: rotate($args);
  transform: rotate($args);
}

@mixin scale($args){
  -webkit-transform: scale($args);
  -ms-transform: scale($args);
  transform: scale($args);
}

@mixin transform($top, $left){
  -webkit-transform: translate($top, $left);
  -ms-transform: translate($top, $left);
  transform: translate($top, $left);
}

@mixin transformY($args){
  -webkit-transform: translateY($args);
  -ms-transform: translateY($args);
  transform: translateY($args);
}

@mixin transformX($args){
  -webkit-transform: translateX($args);
  -ms-transform: translateX($args);
  transform: translateX($args);
}

@mixin transformXD($x,$y,$z){
  -webkit-transform: translate3d($x,$y,$z);
  -ms-transform: translate3d($x,$y,$z);
  transform: translate3d($x,$y,$z);
}

@mixin transformXY($x,$y){
  -webkit-transform: translate($x,$y);
  -ms-transform: translate($x,$y);
  transform: translate($x,$y);
}

@mixin transformRXY($r,$x,$y){
  -webkit-transform: rotate($r) translateX($x) translateY($y);
  -ms-transform: rotate($r) translateX($x) translateY($y);
  transform: rotate($r) translateX($x) translateY($y);
}

@mixin delay($args){
  -webkit-transition-delay: $args;
  -o-transition-delay: $args;
  transition-delay: $args;
}

@mixin backgroundImage($imgpath,$position:0 0,$repeat: no-repeat) {
    background: {
        image: url($imgpath);
        position: $position;
        repeat: $repeat;
    }
}


@mixin keyframe ($animation_name) {
    @-webkit-keyframes $animation_name {
        @content;
    }

    @-moz-keyframes $animation_name {
        @content;
    }

    @-o-keyframes $animation_name {
        @content;
    }

    @keyframes $animation_name {
        @content;
    }
}

@mixin animation ($delay, $duration, $animation, $count) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: forwards;
    -webkit-animation-iteration-count: $count;
    -webkit-animation-iteration-count: $count;

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: forwards;
    -moz-animation-iteration-count: $count;

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: forwards;
    animation-iteration-count: $count;
}

@function translate-media-condition($c) {
  $condMap: (
    "screen": "only screen",
    "print": "only print",
    "large": "(max-width: 1680px)",
    "large-medium": "(max-width: 1440px)",
    "laptop": "(max-width: 1370px)",    
    "laptop-medium": "(max-width: 1280px)",    
    "medium": "(max-width: 1150px)",
    "tablet": "(max-width: 1025px)",
    "tablet-medium": "(max-width: 900px)",
    "tablet-portrait": "(max-width: 770px)",
    "mobile": "(max-width: 640px)",
    "mobile-portrait": "(max-width: 440px)",
    "mobile-small": "(max-width: 340px)",
    "hover": "(min-width: 1024px)",
    "small-height": "(max-height: 768px)"
  );
  @return map-get( $condMap, $c );
}

@mixin media($args) {
  $query: "";
  @each $arg in $args {
    $op: "";
    @if ( $query != "" ) {
      $op: " and ";
    }
    $query: $query + $op + translate-media-condition($arg);
  }
  @media #{$query}  { @content; }
}




